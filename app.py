import asyncio
import aiohttp
import pandas as pd
from flask import Flask, render_template, jsonify
import requests # Gi·ªØ l·∫°i requests cho vi·ªác g·ª≠i Telegram ƒë∆°n gi·∫£n

# ==================== C·∫§U H√åNH TELEGRAM ====================
TELEGRAM_BOT_TOKEN = "7932733422:AAGoC0K-gDz-mwnW9r8x72feqLjB5qJRWe0"
TELEGRAM_CHAT_ID = "1325308034"
# ==========================================================

app = Flask(__name__)

# Bi·∫øn to√†n c·ª•c
previous_rates = {}
notified_symbols = set()

def send_telegram_notification(symbol, rate_pct):
    message_text = (
        f"‚ö†Ô∏è *C·∫£nh B√°o Funding Rate* ‚ö†Ô∏è\n\n"
        f"C·∫∑p giao d·ªãch: *{symbol}*\n"
        f"v·ª´a ƒë·∫°t m·ª©c funding rate ƒë√°ng ch√∫ √Ω\n\n"
        f"Funding Rate hi·ªán t·∫°i: `{rate_pct:.4f}%`"
    )
    chart_url = f"https://www.binance.com/vi/futures/{symbol}"
    keyboard = {"inline_keyboard": [[{"text": f"üìà Xem Chart {symbol}", "url": chart_url}]]}
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {'chat_id': TELEGRAM_CHAT_ID, 'text': message_text, 'parse_mode': 'MarkdownV2', 'reply_markup': keyboard}
    
    try:
        # D√πng requests ·ªü ƒë√¢y v·∫´n ·ªïn v√¨ n√≥ ch·∫°y ƒë·ªôc l·∫≠p v√† kh√¥ng th∆∞·ªùng xuy√™n
        requests.post(url, json=payload, timeout=5)
        print(f"ƒê√£ g·ª≠i c·∫£nh b√°o Telegram th√†nh c√¥ng cho {symbol}.")
    except Exception as e:
        print(f"L·ªói khi g·ª≠i tin nh·∫Øn Telegram cho {symbol}: {e}")

async def get_funding_data_async():
    """H√†m ch√≠nh, gi·ªù ƒë√¢y ho√†n to√†n b·∫•t ƒë·ªìng b·ªô ƒë·ªÉ l·∫•y d·ªØ li·ªáu."""
    global previous_rates, notified_symbols

    url = "https://fapi.binance.com/fapi/v1/premiumIndex"
    try:
        # S·ª≠ d·ª•ng aiohttp ƒë·ªÉ g·ªçi API kh√¥ng l√†m block server
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                response.raise_for_status()
                data = await response.json()
    except Exception as e:
        print(f"L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ API Binance: {e}")
        return []

    # Ph·∫ßn x·ª≠ l√Ω pandas v·∫´n gi·ªØ nguy√™n v√¨ n√≥ l√† x·ª≠ l√Ω CPU, kh√¥ng ph·∫£i I/O
    df = pd.DataFrame(data)
    numeric_cols = ['lastFundingRate']
    for col in numeric_cols:
        df[col] = pd.to_numeric(df[col], errors='coerce')
    df.dropna(subset=['lastFundingRate'], inplace=True)

    funding_rate_threshold = -0.005
    for index, row in df.iterrows():
        symbol = row['symbol']
        current_rate = row['lastFundingRate']
        if current_rate <= funding_rate_threshold and symbol not in notified_symbols:
            send_telegram_notification(symbol, current_rate * 100)
            notified_symbols.add(symbol)
        elif current_rate > funding_rate_threshold and symbol in notified_symbols:
            notified_symbols.remove(symbol)

    current_rates_dict = df.set_index('symbol')['lastFundingRate'].to_dict()
    def determine_trend(row):
        symbol, current_rate = row['symbol'], row['lastFundingRate']
        old_rate = previous_rates.get(symbol)
        if old_rate is None or old_rate == current_rate: return 'stable'
        return 'up' if current_rate > old_rate else 'down'

    df['trend'] = df.apply(determine_trend, axis=1)
    df['lastFundingRate_pct'] = df['lastFundingRate'] * 100
    top_negative = df.sort_values(by='lastFundingRate_pct', ascending=True).head(5)
    previous_rates = current_rates_dict.copy()
    
    return top_negative.to_dict('records')

@app.route('/')
def home():
    return render_template('index.html')

# API route gi·ªù l√† m·ªôt h√†m async
@app.route('/api/data')
async def api_data():
    funding_data = await get_funding_data_async()
    return jsonify(funding_data)

# B·ªè kh·ªëi if __name__ == '__main__' v√¨ gunicorn/uvicorn s·∫Ω x·ª≠ l√Ω vi·ªác ch·∫°y app
